"""
Even Fibonacci numbers

Problem 2
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.
"""


def isMultipleOf2(arg):
    """check if argument is multiple de 23"""
    if arg % 2 == 0:
        return True
    else:
        return False


def isEven(arg):
    """check if argument is even"""
    return isMultipleOf2(arg)


def isOdd(arg):
    """check if argument is odd"""
    return not isEven(arg)


def getFibonaciSequence(maxNum):
    """get a sequence of Fibonacci numbers until a max value"""
    seq = [1, 2]
    lastNumber = 0
    idx = 0

    while lastNumber < maxNum:
        lastNumber = sum(seq[idx:idx + 2])
        seq.append(lastNumber)
        idx += 1

    return seq[:-1]


if __name__ == '__main__':
    fibonacciSeq = getFibonaciSequence(4_000_000)
    sumOfEven = 0

    for num in fibonacciSeq:
        if isEven(num):
            sumOfEven += num

    print(sumOfEven)
